{"version":3,"sources":["components/Layout.jsx","components/ExpressionInput.jsx","components/Results.jsx","logic/calculation.js","App.jsx","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","container","marginTop","logoWrapper","flexGrow","alignItems","display","theme","createMuiTheme","palette","primary","main","Layout","children","classes","ThemeProvider","CssBaseline","AppBar","position","color","Toolbar","className","Typography","variant","target","rel","href","IconButton","Container","data-testid","maxWidth","Grid","spacing","item","xs","map","child","index","ExpressionInput","handleSubmit","useState","input","setInput","valueRef","useRef","useEffect","current","focus","Card","CardContent","TextField","fullWidth","label","onChange","e","value","inputRef","helperText","onKeyDown","keyCode","CardActions","Button","onClick","Results","content","data","setData","List","length","Fragment","ListItem","ListItemIcon","ListItemText","Divider","require","math","create","all","Calculation","expression","this","match","evaluate","App","result","setResult","calculateResult","useCallback","calculate","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e25fefd7.chunk.js","sourcesContent":["import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport HelpIcon from \"@material-ui/icons/Help\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport makeStyles from \"@material-ui/styles/makeStyles\";\nimport ThemeProvider from \"@material-ui/styles/ThemeProvider\";\nimport { createMuiTheme } from \"@material-ui/core/styles/\";\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\n\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    marginTop: 25,\n  },\n  logoWrapper: {\n    flexGrow: 1,\n    alignItems: \"center\",\n    display: \"flex\",\n  },\n}));\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#a71417\",\n    },\n  },\n});\n\nexport const Layout = ({ children }) => {\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar position=\"static\" color=\"transparent\">\n        <Toolbar>\n          <div className={classes.logoWrapper}>\n          <Typography variant=\"h5\"> Mark Morgulis</Typography>\n     \n          </div>\n          <a\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href=\"https://github.com/xsaxdax\"\n          >\n            <IconButton>\n              <GitHubIcon />\n            </IconButton>\n          </a>\n        </Toolbar>\n      </AppBar>\n      <Container\n        data-testid=\"layout\"\n        maxWidth=\"sm\"\n        className={classes.container}\n      >\n        <Grid spacing={2} container>\n          <Grid item xs={12}>\n            <Typography variant=\"h3\">React Calculator</Typography>\n          </Grid>\n          {children.map((child, index) => (\n            <Grid item xs={12} key={index}>\n              {child}\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    </ThemeProvider>\n  );\n};\n","import React, { useRef, useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport TextField from \"@material-ui/core/TextField\";\n\n\n\n\nexport const ExpressionInput = ({ handleSubmit }) => {\n\n\n  const [input, setInput] = useState('')\n  const valueRef = useRef('') //creating a refernce for TextField Component\n\n  useEffect(() => {\n    valueRef.current.focus() //auto focus input field on load\n  }, [])\n\n  const keyPress = (e) => {\n    if (e.keyCode === 13) {//on enter do the same as on click\n      handleSubmit(input)\n      //submitButton.current and then? so I wont have to write code twice to get strange bugs\n    }\n  }\n  //test for right character input(should be done)\n  //helper text shoudn' t display on start \n  //wrong input belongs in the helper text not in the history\n\n  return (\n\n    <Card>\n      <CardContent>\n        <TextField fullWidth={true} label=\"Expression\" variant=\"outlined\" onChange={e => setInput(e.target.value)}\n          inputRef={valueRef} helperText={input ? '' : \"No Input! Try again please\"}\n          onKeyDown={keyPress}\n\n        />\n      </CardContent>\n      <CardActions>\n        <Button\n          color=\"primary\"\n          variant=\"contained\"\n          onClick={() => handleSubmit(\n            /** @TODO: Add your implementation here */\n\n            input\n\n\n          )}\n         \n\n        >\n          Submit\n        </Button>\n\n      </CardActions>\n    </Card>\n  );\n};\n/* ExpressionInput.propTypes=\n {handleSubmit: PropTypes.arrayOf(PropTypes.string)} */","import { CardActions, ListItemIcon } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Divider from '@material-ui/core/Divider';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Typography from \"@material-ui/core/Typography\";\nimport SubdirectoryArrowRightIcon from '@material-ui/icons/SubdirectoryArrowRight';\nimport PropTypes from 'prop-types';\nimport React, { useEffect, useState } from \"react\";\n\n//https://www.robinwieruch.de/react-add-item-to-list\n\n\n\nexport const Results = ({ content }) => {\n\n  const [data, setData] = useState([])\n\n\n  useEffect(() => {\n    if (content !== \"\") {\n      setData((data) => [...data, content])\n    }\n  }, [content]);//on new input add it to an array\n\n  return (\n    <Card data-testid=\"results\">\n      <CardContent>\n        <Typography variant=\"h5\">Results</Typography>\n        {/** @TODO: Add your implementation here */}\n\n        <List >\n\n          {data.length? <React.Fragment>\n            <ListItem >\n              <ListItemIcon >\n                <SubdirectoryArrowRightIcon />\n              </ListItemIcon>\n              <ListItemText primary={content} />\n            </ListItem>\n            <Divider variant=\"fullWidth\" />\n          </React.Fragment> :null}\n\n\n\n          {data.map((data, index/*, results: all the history*/) =>\n            <React.Fragment>\n\n\n              <ListItem key={index}>\n\n                <ListItemIcon key={index}>\n                  <Typography variant=\"subtitle1\">{index + 1}</Typography>\n                </ListItemIcon>\n\n                <ListItemText primary={data} />\n\n              </ListItem>\n\n              <Divider variant=\"fullWidth\" />\n            </React.Fragment>\n          )\n          }\n        </List>\n\n\n      </CardContent>\n      <CardActions>\n        <Button\n          variant=\"outlined\" color=\"secondary\"\n          onClick={() =>setData([])}\n\n        >\n          Erase Results\n        </Button>\n\n      </CardActions>\n    </Card>\n  );\n}\n\nResults.propTypes =\n{\n  content: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number])\n}\n/*use : ...content, to get all the characters */\n\n\n","const { create, all } = require('mathjs') //import mathjs, because why code it yourself?\nconst math = create(all)//create an instance with all mathjs functonality, although its not necesarry now, \n//you can trigonometry and other stuff later on \n\nexport default class Calculation {\n\n    \n\n    \n    constructor(expression) {\n        this.expression = expression;\n        \n    }\n\n    calculate() {\n        /**\n         * @TODO Add your implementaiton here\n         */\n        //add checks for input, check illegal characters\n        if ( this.expression.match(/^[a-zA-Z!@#$%^&*()[\\]{};':\"\\\\|,<>/?]*$/)){\n            return null\n        }\n        let input=this.expression\n        this.expression=math.evaluate(this.expression) //evaluate Input\n        if (typeof this.expression ==='number'){ //if result isn t a number it s probaly a wrong Input\n            return input+ \" = \" + this.expression //tests will fail if it s coded that way, but makes it easier, to not store the input at an other place\n        }else{\n            return null\n        }\n        ;\n    }\n}\n","import { useState, useCallback } from \"react\";\nimport { Layout } from \"./components/Layout\";\nimport { ExpressionInput } from \"./components/ExpressionInput\";\nimport { Results } from \"./components/Results\";\nimport Calculation from \"./logic/calculation\";\n\nexport const App = () => {\n  const [result, setResult] = useState(\"\");\n\n  const calculateResult = useCallback(\n    (input) => {\n      setResult(new Calculation(input).calculate() ?? \"Wrong input!\"); //The nullish coalescing operator (??) is a logical operator \n      //that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand.\n    },\n    [setResult]\n  );\n\n  return (\n    <Layout>\n      <ExpressionInput handleSubmit={calculateResult} />\n      <Results content={result} />\n    </Layout>\n  );\n};\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}